# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.4 on Fri Sep 27 22:40:21 2019
#

import wx
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class AtaqueDialog_Ui(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AtaqueDialog_Ui.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((921, 591))
        self.tabs = wx.Notebook(self, wx.ID_ANY)
        self.tab_info = wx.Panel(self.tabs, wx.ID_ANY)
        self.txt_resumen = wx.TextCtrl(self.tab_info, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH2)
        self.txt_notas = wx.TextCtrl(self.tab_info, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.btn_save_notas = wx.Button(self.tab_info, wx.ID_ANY, "Guardar")
        self.tab_ataque = wx.Panel(self.tabs, wx.ID_ANY)
        self.txt_pin = wx.TextCtrl(self.tab_ataque, wx.ID_ANY, "12345670")
        self.check_pin = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "-p | Usar PIN especifico, despues se detiene el reaver")
        self.txt_timeout = wx.TextCtrl(self.tab_ataque, wx.ID_ANY, "5")
        self.check_timeout = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "-t | Timeout receiver")
        self.txt_timeout_m57 = wx.TextCtrl(self.tab_ataque, wx.ID_ANY, "0.2")
        self.check_timeout_m57 = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "-T   | Timeout para los M5/M7")
        self.txt_recurring = wx.TextCtrl(self.tab_ataque, wx.ID_ANY, "2:10")
        self.check_recurring = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "-r  | Espera Y segundos cada X PINS. En formato X:Y")
        self.txt_delay = wx.TextCtrl(self.tab_ataque, wx.ID_ANY, "1")
        self.check_delay = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "Tiempo de pausa entre PINs")
        self.combo_verbose = wx.ComboBox(self.tab_ataque, wx.ID_ANY, choices=["No Verbose", "Low Verbose", "Medium Verbose", "High Verbose"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.check_noassociate = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "-A | No Associar al router")
        self.check_nonack = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "-N | No Nacks")
        self.check_ignore_fcs = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "-F | Ignore FCS")
        self.check_pixie = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "-K | Usar ataque PixieDust")
        self.checkbox_10 = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "")
        self.checkbox_11 = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "")
        self.checkbox_12 = wx.CheckBox(self.tab_ataque, wx.ID_ANY, "")
        self.cmb_reaver_configs = wx.ComboBox(self.tab_ataque, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.btn_new_reaver_config_copy = wx.Button(self.tab_ataque, wx.ID_ANY, "Nuevo")
        self.btn_save_reaver_config = wx.Button(self.tab_ataque, wx.ID_ANY, "Guardar")
        self.btn_saveas_reaver_config = wx.Button(self.tab_ataque, wx.ID_ANY, "Guardar como...")
        self.btn_delete_reaver_config = wx.Button(self.tab_ataque, wx.ID_ANY, "Eliminar")
        self.btn_run_reaver = wx.Button(self.tab_ataque, wx.ID_ANY, "Ejecutar Reaver")
        self.tab_output = wx.Panel(self.tabs, wx.ID_ANY)
        self.txt_output = wx.TextCtrl(self.tab_output, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH2)
        self.btn_clear_output = wx.Button(self.tab_output, wx.ID_ANY, "Clear")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_btn_save_notas, self.btn_save_notas)
        self.Bind(wx.EVT_COMBOBOX, self.on_cmb_reaver_config_change_selection, self.cmb_reaver_configs)
        self.Bind(wx.EVT_BUTTON, self.on_btn_new_reaver_config, self.btn_new_reaver_config_copy)
        self.Bind(wx.EVT_BUTTON, self.on_btn_save_reaver_config, self.btn_save_reaver_config)
        self.Bind(wx.EVT_BUTTON, self.on_btn_saveas_reaver_config, self.btn_saveas_reaver_config)
        self.Bind(wx.EVT_BUTTON, self.on_btn_delete_reaver_config, self.btn_delete_reaver_config)
        self.Bind(wx.EVT_BUTTON, self.on_btn_run_reaver, self.btn_run_reaver)
        self.Bind(wx.EVT_BUTTON, self.on_button_clear_output, self.btn_clear_output)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AtaqueDialog_Ui.__set_properties
        self.SetTitle("Ataque a ESSID")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("/home/q/dev/wpstool/src/icons/scanner_redes.bmp", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((921, 591))
        self.txt_resumen.SetBackgroundColour(wx.Colour(222, 222, 222))
        self.check_recurring.SetToolTip(u"Ejemplo: 2:10 | Cada 2 PINs se hará una pausa de 10 segundos")
        self.combo_verbose.SetSelection(1)
        self.check_noassociate.SetToolTip(u"Usar solo con routers que rechazen la asociación")
        self.btn_run_reaver.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Noto Sans"))
        self.txt_output.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_BACKGROUND))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AtaqueDialog_Ui.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_3 = wx.GridSizer(4, 2, 5, 25)
        grid_sizer_2 = wx.GridBagSizer(5, 3)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.StaticBoxSizer(wx.StaticBox(self.tab_info, wx.ID_ANY, "Notas"), wx.VERTICAL)
        sizer_9 = wx.StaticBoxSizer(wx.StaticBox(self.tab_info, wx.ID_ANY, "Resumen"), wx.VERTICAL)
        sizer_9.Add(self.txt_resumen, 1, wx.ALL | wx.EXPAND, 5)
        sizer_2.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_8.Add(self.txt_notas, 1, wx.EXPAND, 0)
        sizer_8.Add(self.btn_save_notas, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_8, 1, wx.EXPAND, 0)
        self.tab_info.SetSizer(sizer_2)
        grid_sizer_2.Add(self.txt_pin, (0, 0), (1, 1), 0, 0)
        grid_sizer_2.Add(self.check_pin, (0, 1), (1, 1), wx.EXPAND, 0)
        grid_sizer_2.Add(self.txt_timeout, (1, 0), (1, 1), 0, 0)
        grid_sizer_2.Add(self.check_timeout, (1, 1), (1, 1), 0, 0)
        grid_sizer_2.Add(self.txt_timeout_m57, (2, 0), (1, 1), 0, 0)
        grid_sizer_2.Add(self.check_timeout_m57, (2, 1), (1, 1), 0, 0)
        grid_sizer_2.Add(self.txt_recurring, (3, 0), (1, 1), 0, 0)
        grid_sizer_2.Add(self.check_recurring, (3, 1), (1, 1), 0, 0)
        grid_sizer_2.Add(self.txt_delay, (4, 0), (1, 1), 0, 0)
        grid_sizer_2.Add(self.check_delay, (4, 1), (1, 1), 0, 0)
        sizer_6.Add(grid_sizer_2, 2, wx.ALL | wx.EXPAND, 4)
        static_line_1 = wx.StaticLine(self.tab_ataque, wx.ID_ANY)
        sizer_6.Add(static_line_1, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.combo_verbose, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_3.Add(self.check_noassociate, 0, 0, 0)
        grid_sizer_3.Add(self.check_nonack, 0, 0, 0)
        grid_sizer_3.Add(self.check_ignore_fcs, 0, 0, 0)
        grid_sizer_3.Add(self.check_pixie, 0, 0, 0)
        grid_sizer_3.Add(self.checkbox_10, 0, 0, 0)
        grid_sizer_3.Add(self.checkbox_11, 0, 0, 0)
        grid_sizer_3.Add(self.checkbox_12, 0, 0, 0)
        sizer_6.Add(grid_sizer_3, 1, wx.ALL | wx.EXPAND, 10)
        sizer_4.Add(sizer_6, 3, wx.ALL | wx.EXPAND, 8)
        sizer_5.Add(self.cmb_reaver_configs, 0, wx.EXPAND, 0)
        sizer_5.Add((20, 20), 0, 0, 0)
        sizer_5.Add(self.btn_new_reaver_config_copy, 0, wx.EXPAND, 0)
        sizer_5.Add(self.btn_save_reaver_config, 0, wx.EXPAND, 0)
        sizer_5.Add(self.btn_saveas_reaver_config, 0, wx.EXPAND, 0)
        sizer_5.Add(self.btn_delete_reaver_config, 0, wx.EXPAND, 0)
        sizer_5.Add((20, 20), 2, wx.EXPAND | wx.LEFT, 0)
        sizer_5.Add(self.btn_run_reaver, 1, wx.ALL | wx.EXPAND, 3)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)
        self.tab_ataque.SetSizer(sizer_4)
        sizer_10.Add(self.txt_output, 3, wx.ALL | wx.EXPAND, 7)
        sizer_14.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_14.Add(self.btn_clear_output, 0, 0, 0)
        sizer_10.Add(sizer_14, 0, wx.EXPAND, 0)
        self.tab_output.SetSizer(sizer_10)
        self.tabs.AddPage(self.tab_info, "Info")
        self.tabs.AddPage(self.tab_ataque, "Ataque")
        self.tabs.AddPage(self.tab_output, "Output")
        sizer_1.Add(self.tabs, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def on_btn_save_notas(self, event):  # wxGlade: AtaqueDialog_Ui.<event_handler>
        print("Event handler 'on_btn_save_notas' not implemented!")
        event.Skip()

    def on_cmb_reaver_config_change_selection(self, event):  # wxGlade: AtaqueDialog_Ui.<event_handler>
        print("Event handler 'on_cmb_reaver_config_change_selection' not implemented!")
        event.Skip()

    def on_btn_new_reaver_config(self, event):  # wxGlade: AtaqueDialog_Ui.<event_handler>
        print("Event handler 'on_btn_new_reaver_config' not implemented!")
        event.Skip()

    def on_btn_save_reaver_config(self, event):  # wxGlade: AtaqueDialog_Ui.<event_handler>
        print("Event handler 'on_btn_save_reaver_config' not implemented!")
        event.Skip()

    def on_btn_saveas_reaver_config(self, event):  # wxGlade: AtaqueDialog_Ui.<event_handler>
        print("Event handler 'on_btn_saveas_reaver_config' not implemented!")
        event.Skip()

    def on_btn_delete_reaver_config(self, event):  # wxGlade: AtaqueDialog_Ui.<event_handler>
        print("Event handler 'on_btn_delete_reaver_config' not implemented!")
        event.Skip()

    def on_btn_run_reaver(self, event):  # wxGlade: AtaqueDialog_Ui.<event_handler>
        print("Event handler 'on_btn_run_reaver' not implemented!")
        event.Skip()

    def on_button_clear_output(self, event):  # wxGlade: AtaqueDialog_Ui.<event_handler>
        print("Event handler 'on_button_clear_output' not implemented!")
        event.Skip()

# end of class AtaqueDialog_Ui
